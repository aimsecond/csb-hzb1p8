{"version":3,"sources":["App.js","index.js"],"names":["eventStart","Date","ruleBeforeFix","RRule","freq","MONTHLY","bymonthday","wkst","SU","ruleAfterFix","dtstart","localToUTC","d","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","UTCtoLocal","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","App","useState","date","setDate","after","nextBeforeFix","setNextBeforeFix","nextAfterFix","setNextAfterFix","useEffect","timer","setInterval","clearInterval","className","class","href","toString","toISOString","colspan","toText","id","rowspan","Intl","DateTimeFormat","resolvedOptions","timeZone","style","color","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.aee3945a.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { RRule } from \"rrule\";\nimport React, { useState, useEffect } from \"react\";\n\nconst eventStart = new Date(\"04/01/2023 00:00:00\");\n\n// monthly: every month on the 1st\nconst ruleBeforeFix = () =>\n  new RRule({\n    freq: RRule.MONTHLY,\n    bymonthday: 1,\n    wkst: RRule.SU\n  });\n\nconst ruleAfterFix = (eventStart) =>\n  new RRule({\n    freq: RRule.MONTHLY,\n    bymonthday: 1,\n    wkst: RRule.SU,\n    dtstart: localToUTC(eventStart)\n  });\n\nfunction localToUTC(d) {\n  return new Date(\n    Date.UTC(\n      d.getFullYear(),\n      d.getMonth(),\n      d.getDate(),\n      d.getHours(),\n      d.getMinutes(),\n      d.getSeconds()\n    )\n  );\n}\n\nfunction UTCtoLocal(d) {\n  return new Date(\n    d.getUTCFullYear(),\n    d.getUTCMonth(),\n    d.getUTCDate(),\n    d.getUTCHours(),\n    d.getUTCMinutes(),\n    d.getUTCSeconds()\n  );\n}\n\nexport default function App() {\n  var [date, setDate] = useState(new Date());\n  var [nextBeforeFix, setNextBeforeFix] = useState(\n    ruleBeforeFix().after(eventStart, false)\n  );\n  var [nextAfterFix, setNextAfterFix] = useState(\n    UTCtoLocal(ruleAfterFix(eventStart).after(localToUTC(eventStart, false)))\n  );\n\n  useEffect(() => {\n    var timer = setInterval(() => setDate(new Date()), 1000);\n    setNextBeforeFix(ruleBeforeFix().after(eventStart, false));\n    setNextAfterFix(\n      UTCtoLocal(ruleAfterFix(eventStart).after(localToUTC(eventStart, false)))\n    );\n    return function cleanup() {\n      clearInterval(timer);\n    };\n  }, [date]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\" class=\"mt-5 ms-5\">\n        <h2>RRule demo</h2>\n        <p>\n          When <code>event_start</code> is set, sometimes the{\" \"}\n          <code>next_occurrence</code> computed by Recurrence component is not\n          correct.\n          <br />\n          This is because we use local time for all the computation, while the\n          underlying package\n          <a href=\"https://github.com/jakubroztocil/rrule\"> rrule </a> strongly\n          advise that users should{\" \"}\n          <a href=\"https://github.com/jakubroztocil/rrule#important-use-utc-dates\">\n            always use UTC time\n          </a>\n          .<br />\n          Here is another discussion about{\" \"}\n          <a href=\"https://github.com/jakubroztocil/rrule/issues/336\">\n            rrule timezone support\n          </a>\n          , which is a common confusion. And basically the most upvoted reply\n          said\n          <br />\n          converting to and from UTC is the best practice.\n          <br />\n        </p>\n\n        <p>\n          The fix is simple, when <code>event_start</code> is set:\n          <br />\n          1. always convert <code>event_start</code> to UTC before calculation\n          <br />\n          2. always convert calculated <code>next_occurrence</code> from UTC to\n          local timezone for display\n          <br />\n          3. Add <code>DTSTART</code> flag in rrule (important!)\n        </p>\n\n        <p>\n          Now we can take a look at how it could go wrong and how does our fix\n          can resolve it.\n        </p>\n\n        <p>\n          In this demo, <code>event_start</code> is set as{\" \"}\n          <code>new Date(\"04/01/2023 00:00:00\")</code>:\n        </p>\n\n        <div class=\"col-md-9\">\n          <table class=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th></th>\n                <th>local time zone</th>\n                <th>UTC</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <code>event_start</code>\n                </td>\n                <td>{eventStart.toString()}</td>\n                <td>{eventStart.toISOString()}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <p>And your current system time is {date.toString()}:</p>\n\n        <div class=\"col-md-9\">\n          <table class=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th colspan=\"2\"></th>\n                <th>\n                  Before fix:\n                  <br />\n                  use local timezone <code>event_start</code> for computation,\n                  <br />\n                  Do NOT set <code>DTSTART</code> flag in rrule\n                </th>\n                <th>\n                  After fix:\n                  <br />\n                  use UTC <code>event_start</code> for computation,\n                  <br />\n                  Set <code>DTSTART</code> flag in rrule\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td colspan=\"2\">\n                  RRULE String:\n                  <br />\n                  {ruleBeforeFix().toText()}\n                </td>\n                <td id=\"rule-1\">{ruleBeforeFix().toString()}</td>\n                <td id=\"rule-2\">{ruleAfterFix(eventStart).toString()}</td>\n              </tr>\n              <tr>\n                <td rowspan=\"2\">\n                  <code>next_occurrence</code> computed\n                </td>\n                <td>\n                  local time zone:{\" \"}\n                  {Intl.DateTimeFormat().resolvedOptions().timeZone}\n                </td>\n                <td style={{ color: \"red\" }} id=\"rule-1-local\">\n                  {nextBeforeFix.toString()}\n                </td>\n                <td style={{ color: \"green\" }} id=\"rule-2-local\">\n                  {nextAfterFix.toString()}\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <span>UTC</span>\n                </td>\n                <td id=\"rule-1-utc\">{nextBeforeFix.toISOString()}</td>\n                <td id=\"rule-2-utc\">{nextAfterFix.toISOString()}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <p>\n          If user set <code>event_start</code> as Apr.1 and rrule is every month\n          on the 1st, then <code>next_occurence</code> is expected to be{\" \"}\n          <span style={{ color: \"green\" }}>May.1 (the green date)</span>\n          <br />\n          However, if we stick to the original logic, you may see{\" \"}\n          <span style={{ color: \"red\" }}>\n            Apr.1 or Apr.30 (the red date)\n          </span>{\" \"}\n          as result. More specifically, <br />\n          if user is in America/Los_Angeles(PST) time zone, the user will see\n          Apr.30 when his/her local time falls bewteen\n          <br />\n          16:00-22:59 PM; and Apr.1 for the rest of the time.\n          <br />\n          Please feel free to play around with the <code>event_start</code>,\n          rrule and local system time, to see how computed{\" \"}\n          <code>next_occurrence</code> will change!\n        </p>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}